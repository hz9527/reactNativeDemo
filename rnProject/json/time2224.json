{
"time2224":
  [
    {
      "author":"user3",
      "time":"2016/10/20 22:08",
      "content":"1.单例模式（在js生命周期内，某些函数只需要执行一次，或某些对象只需要存在一个即可）"
    },
    {
      "author":"user5",
      "time":"2016/10/20 22:21",
      "content":"2.策略模式（定义一系列算法，将其封装起来，可以相互替换）"
    },
    {
      "author":"user2",
      "time":"2016/10/20 22:52",
      "content":"3.代理模式（将原有接口交由其他接口调用，以控制原有接口访问权限、在必要时候调用、缓存原有接口返回等）"
    },
    {
      "author":"user1",
      "time":"2016/10/20 23:12",
      "content":"4.迭代器模式（迭代器模式可以把迭代的过程从业务逻辑中分离出来）"
    },{
      "author":"user3",
      "time":"2016/10/20 23:42",
      "content":"5.发布—订阅模式6.命令模式7.组合模式8模板方法模式template"
    },
    {
      "author":"user4",
      "time":"2016/10/20 23:49",
      "content":"9享元模式flyweight10责任链模式chain11中介者模式mediator12装饰者模式decorator13状态模式state14适配器模式wrapper"
    }
  ]
}
